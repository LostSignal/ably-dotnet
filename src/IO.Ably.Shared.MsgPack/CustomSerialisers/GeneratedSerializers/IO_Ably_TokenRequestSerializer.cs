//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;

namespace IO.Ably.CustomSerialisers
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.DocumentationRules", "CS1591:Missing XML comment for publicly visible type or member", Justification = "Internal serializers")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MsgPack.Serialization.CodeDomSerializers.CodeDomSerializerBuilder", "0.6.0.0")]
    public class IO_Ably_TokenRequestSerializer : MsgPack.Serialization.MessagePackSerializer<IO.Ably.TokenRequest>
    {
        private MsgPack.Serialization.MessagePackSerializer<string> _serializer0;

        private MsgPack.Serialization.MessagePackSerializer<IO.Ably.Capability> _serializer1;

        private MsgPack.Serialization.MessagePackSerializer<System.Nullable<System.DateTimeOffset>> _serializer2;

        private MsgPack.Serialization.MessagePackSerializer<System.Nullable<System.TimeSpan>> _serializer3;
        private MsgPack.Serialization.MessagePackSerializer<long> _serializer4;

        public IO_Ably_TokenRequestSerializer(MsgPack.Serialization.SerializationContext context) :
                base(context)
        {
            MsgPack.Serialization.PolymorphismSchema schema0 = default(MsgPack.Serialization.PolymorphismSchema);
            schema0 = null;
            this._serializer0 = context.GetSerializer<string>(schema0);
            MsgPack.Serialization.PolymorphismSchema schema1 = default(MsgPack.Serialization.PolymorphismSchema);
            schema1 = null;
            this._serializer1 = context.GetSerializer<IO.Ably.Capability>(schema1);
            MsgPack.Serialization.PolymorphismSchema schema2 = default(MsgPack.Serialization.PolymorphismSchema);
            schema2 = null;
            this._serializer2 = context.GetSerializer<System.Nullable<System.DateTimeOffset>>(schema2);
            MsgPack.Serialization.PolymorphismSchema schema3 = default(MsgPack.Serialization.PolymorphismSchema);
            schema3 = null;
            this._serializer3 = context.GetSerializer<System.Nullable<System.TimeSpan>>(schema3);
            this._serializer4 = context.GetSerializer<long>(null);
        }

        protected override void PackToCore(MsgPack.Packer packer, IO.Ably.TokenRequest objectTree)
        {
            var nonNullFields = new bool[]
            {
                objectTree.Capability != null,
                objectTree.ClientId.IsNotEmpty(),
                objectTree.KeyName != null,
                objectTree.Mac.IsNotEmpty(),
                objectTree.Nonce.IsNotEmpty(),
                objectTree.Timestamp.HasValue,
                objectTree.Ttl.HasValue,
            }.Count(x => x); //One for MsgSerial and one for Action as this is always serialised

            packer.PackMapHeader(nonNullFields);
            if (objectTree.Capability != null)
            {
                this._serializer0.PackTo(packer, "capability");
                this._serializer1.PackTo(packer, objectTree.Capability);
            }
            if (objectTree.ClientId.IsNotEmpty())
            {
                this._serializer0.PackTo(packer, "clientId");
                this._serializer0.PackTo(packer, objectTree.ClientId);
            }
            if (objectTree.KeyName.IsNotEmpty())
            {
                this._serializer0.PackTo(packer, "keyName");
                this._serializer0.PackTo(packer, objectTree.KeyName);
            }
            if (objectTree.Mac.IsNotEmpty())
            {
                this._serializer0.PackTo(packer, "mac");
                this._serializer0.PackTo(packer, objectTree.Mac);
            }
            if (objectTree.Nonce.IsNotEmpty())
            {
                this._serializer0.PackTo(packer, "nonce");
                this._serializer0.PackTo(packer, objectTree.Nonce);
            }
            if (objectTree.Timestamp.HasValue)
            {
                this._serializer0.PackTo(packer, "timestamp");
                this._serializer4.PackTo(packer, objectTree.Timestamp.Value.ToUnixTimeInMilliseconds());
            }
            if (objectTree.Ttl.HasValue)
            {
                this._serializer0.PackTo(packer, "ttl");
                this._serializer4.PackTo(packer, (long)objectTree.Ttl.Value.TotalMilliseconds);
            }
        }

        protected override IO.Ably.TokenRequest UnpackFromCore(MsgPack.Unpacker unpacker)
        {
            IO.Ably.TokenRequest result = default(IO.Ably.TokenRequest);
            result = new IO.Ably.TokenRequest();
            int itemsCount0 = default(int);
            itemsCount0 = MsgPack.Serialization.UnpackHelpers.GetItemsCount(unpacker);
            for (int i = 0; (i < itemsCount0); i = (i + 1))
            {
                string key = default(string);
                string nullable6 = default(string);
                nullable6 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(IO.Ably.TokenRequest),
                    "MemberName");
                if (((nullable6 == null)
                     == false))
                {
                    key = nullable6;
                }
                else
                {
                    throw MsgPack.Serialization.SerializationExceptions.NewNullIsProhibited("MemberName");
                }
                if ((key == "ttl"))
                {
                    System.Nullable<System.TimeSpan> nullable13 = default(System.Nullable<System.TimeSpan>);
                    if ((unpacker.Read() == false))
                    {
                        throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                    }
                    if (((unpacker.IsArrayHeader == false)
                         && (unpacker.IsMapHeader == false)))
                    {
                        nullable13 = this._serializer3.UnpackFrom(unpacker);
                    }
                    else
                    {
                        MsgPack.Unpacker disposable4 = default(MsgPack.Unpacker);
                        disposable4 = unpacker.ReadSubtree();
                        try
                        {
                            nullable13 = this._serializer3.UnpackFrom(disposable4);
                        }
                        finally
                        {
                            if (((disposable4 == null)
                                 == false))
                            {
                                disposable4.Dispose();
                            }
                        }
                    }
                    if (nullable13.HasValue)
                    {
                        result.Ttl = nullable13;
                    }
                }
                else
                {
                    if ((key == "timestamp"))
                    {
                        System.Nullable<System.DateTimeOffset> nullable12 =
                            default(System.Nullable<System.DateTimeOffset>);
                        if ((unpacker.Read() == false))
                        {
                            throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                        }
                        if (((unpacker.IsArrayHeader == false)
                             && (unpacker.IsMapHeader == false)))
                        {
                            nullable12 = this._serializer2.UnpackFrom(unpacker);
                        }
                        else
                        {
                            MsgPack.Unpacker disposable3 = default(MsgPack.Unpacker);
                            disposable3 = unpacker.ReadSubtree();
                            try
                            {
                                nullable12 = this._serializer2.UnpackFrom(disposable3);
                            }
                            finally
                            {
                                if (((disposable3 == null)
                                     == false))
                                {
                                    disposable3.Dispose();
                                }
                            }
                        }
                        if (nullable12.HasValue)
                        {
                            result.Timestamp = nullable12;
                        }
                    }
                    else
                    {
                        if ((key == "nonce"))
                        {
                            string nullable11 = default(string);
                            nullable11 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker,
                                typeof(IO.Ably.TokenRequest), "System.String Nonce");
                            if (((nullable11 == null)
                                 == false))
                            {
                                result.Nonce = nullable11;
                            }
                        }
                        else
                        {
                            if ((key == "mac"))
                            {
                                string nullable10 = default(string);
                                nullable10 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker,
                                    typeof(IO.Ably.TokenRequest), "System.String Mac");
                                if (((nullable10 == null)
                                     == false))
                                {
                                    result.Mac = nullable10;
                                }
                            }
                            else
                            {
                                if ((key == "keyName"))
                                {
                                    string nullable9 = default(string);
                                    nullable9 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker,
                                        typeof(IO.Ably.TokenRequest), "System.String KeyName");
                                    if (((nullable9 == null)
                                         == false))
                                    {
                                        result.KeyName = nullable9;
                                    }
                                }
                                else
                                {
                                    if ((key == "clientId"))
                                    {
                                        string nullable8 = default(string);
                                        nullable8 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker,
                                            typeof(IO.Ably.TokenRequest), "System.String ClientId");
                                        if (((nullable8 == null)
                                             == false))
                                        {
                                            result.ClientId = nullable8;
                                        }
                                    }
                                    else
                                    {
                                        if ((key == "capability"))
                                        {
                                            IO.Ably.Capability nullable7 = default(IO.Ably.Capability);
                                            if ((unpacker.Read() == false))
                                            {
                                                throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                                            }
                                            if (((unpacker.IsArrayHeader == false)
                                                 && (unpacker.IsMapHeader == false)))
                                            {
                                                nullable7 = this._serializer1.UnpackFrom(unpacker);
                                            }
                                            else
                                            {
                                                MsgPack.Unpacker disposable2 = default(MsgPack.Unpacker);
                                                disposable2 = unpacker.ReadSubtree();
                                                try
                                                {
                                                    nullable7 = this._serializer1.UnpackFrom(disposable2);
                                                }
                                                finally
                                                {
                                                    if (((disposable2 == null)
                                                         == false))
                                                    {
                                                        disposable2.Dispose();
                                                    }
                                                }
                                            }
                                            if (((nullable7 == null)
                                                 == false))
                                            {
                                                result.Capability = nullable7;
                                            }
                                        }
                                        else
                                        {
                                            unpacker.Skip();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return result;
        }

        private static T @__Conditional<T>(bool condition, T whenTrue, T whenFalse)
        {
            if (condition)
            {
                return whenTrue;
            }
            else
            {
                return whenFalse;
            }
        }
    }
}
