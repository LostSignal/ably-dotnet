//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;
using MsgPack;

namespace IO.Ably.CustomSerialisers {
    
    
    [System.Diagnostics.CodeAnalysis.SuppressMessage("StyleCop.CSharp.DocumentationRules", "CS1591:Missing XML comment for publicly visible type or member", Justification = "Internal serializers")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MsgPack.Serialization.CodeDomSerializers.CodeDomSerializerBuilder", "0.6.0.0")]
    public class IO_Ably_PresenceMessageSerializer : MsgPack.Serialization.MessagePackSerializer<IO.Ably.PresenceMessage> {
        
        private MsgPack.Serialization.MessagePackSerializer<string> _serializer0;
        
        private MsgPack.Serialization.MessagePackSerializer<IO.Ably.PresenceAction> _serializer1;
        
        private MsgPack.Serialization.MessagePackSerializer<object> _serializer2;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Nullable<System.DateTimeOffset>> _serializer3;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Nullable<IO.Ably.PresenceAction>> _serializer4;
        
        public IO_Ably_PresenceMessageSerializer(MsgPack.Serialization.SerializationContext context) : 
                base(context) {
            MsgPack.Serialization.PolymorphismSchema schema0 = default(MsgPack.Serialization.PolymorphismSchema);
            schema0 = null;
            this._serializer0 = context.GetSerializer<string>(schema0);
            this._serializer1 = context.GetSerializer<IO.Ably.PresenceAction>(MsgPack.Serialization.EnumMessagePackSerializerHelpers.DetermineEnumSerializationMethod(context, typeof(IO.Ably.PresenceAction), MsgPack.Serialization.EnumMemberSerializationMethod.ByUnderlyingValue));
            MsgPack.Serialization.PolymorphismSchema schema1 = default(MsgPack.Serialization.PolymorphismSchema);
            schema1 = null;
            this._serializer2 = context.GetSerializer<object>(schema1);
            MsgPack.Serialization.PolymorphismSchema schema2 = default(MsgPack.Serialization.PolymorphismSchema);
            schema2 = null;
            this._serializer3 = context.GetSerializer<System.Nullable<System.DateTimeOffset>>(schema2);
            MsgPack.Serialization.PolymorphismSchema schema3 = default(MsgPack.Serialization.PolymorphismSchema);
            schema3 = null;
            this._serializer4 = context.GetSerializer<System.Nullable<IO.Ably.PresenceAction>>(schema3);
        }
        
        protected override void PackToCore(MsgPack.Packer packer, IO.Ably.PresenceMessage objectTree)
        {
            var nonNullFields = new bool[]
            {
                objectTree.Id.IsNotEmpty(),
                objectTree.ClientId.IsNotEmpty(),
                objectTree.ConnectionId.IsNotEmpty(),
                objectTree.Data != null,
                objectTree.Encoding.IsNotEmpty(),
                objectTree.Timestamp != null,
            }.Count(x => x) + 1; //one for action

            packer.PackMapHeader(nonNullFields);
            if (objectTree.Id.IsNotEmpty())
            {
                this._serializer0.PackTo(packer, "id");
                this._serializer0.PackTo(packer, objectTree.Id);
            }
            this._serializer0.PackTo(packer, "action");
            this._serializer1.PackTo(packer, objectTree.Action);
            if (objectTree.ClientId.IsNotEmpty())
            {
                this._serializer0.PackTo(packer, "clientId");
                this._serializer0.PackTo(packer, objectTree.ClientId);
            }
            if (objectTree.ConnectionId.IsNotEmpty())
            {
                this._serializer0.PackTo(packer, "connectionId");
                this._serializer0.PackTo(packer, objectTree.ConnectionId);
            }
            if (objectTree.Data != null)
            {
                this._serializer0.PackTo(packer, "data");
                this._serializer2.PackTo(packer, objectTree.Data);
            }
            if (objectTree.Encoding.IsNotEmpty())
            {
                this._serializer0.PackTo(packer, "encoding");
                this._serializer0.PackTo(packer, objectTree.Encoding);
            }
            if (objectTree.Timestamp != null)
            {
                this._serializer0.PackTo(packer, "timestamp");
                this._serializer3.PackTo(packer, objectTree.Timestamp);
            }
        }
        
        protected override IO.Ably.PresenceMessage UnpackFromCore(MsgPack.Unpacker unpacker)
        {
            IO.Ably.PresenceMessage result = default(IO.Ably.PresenceMessage);
            result = new IO.Ably.PresenceMessage();
            int itemsCount0 = default(int);
            itemsCount0 = MsgPack.Serialization.UnpackHelpers.GetItemsCount(unpacker);
            for (int i = 0; (i < itemsCount0); i = (i + 1))
            {
                string key = default(string);
                string nullable6 = default(string);
                nullable6 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker,
                    typeof(IO.Ably.PresenceMessage), "MemberName");
                if (((nullable6 == null)
                     == false))
                {
                    key = nullable6;
                }
                else
                {
                    throw MsgPack.Serialization.SerializationExceptions.NewNullIsProhibited("MemberName");
                }
                if ((key == "timestamp"))
                {
                    System.Nullable<System.DateTimeOffset> nullable13 = default(System.Nullable<System.DateTimeOffset>);
                    if ((unpacker.Read() == false))
                    {
                        throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                    }
                    if (((unpacker.IsArrayHeader == false)
                         && (unpacker.IsMapHeader == false)))
                    {
                        nullable13 = this._serializer3.UnpackFrom(unpacker);
                    }
                    else
                    {
                        MsgPack.Unpacker disposable4 = default(MsgPack.Unpacker);
                        disposable4 = unpacker.ReadSubtree();
                        try
                        {
                            nullable13 = this._serializer3.UnpackFrom(disposable4);
                        }
                        finally
                        {
                            if (((disposable4 == null)
                                 == false))
                            {
                                disposable4.Dispose();
                            }
                        }
                    }
                    if (nullable13.HasValue)
                    {
                        result.Timestamp = nullable13;
                    }
                }
                else
                {
                    if ((key == "encoding"))
                    {
                        string nullable12 = default(string);
                        nullable12 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker,
                            typeof(IO.Ably.PresenceMessage), "System.String encoding");
                        if (((nullable12 == null)
                             == false))
                        {
                            result.Encoding = nullable12;
                        }
                    }
                    else
                    {
                        if ((key == "data"))
                        {
                            object nullable11 = default(object);
                            if ((unpacker.Read() == false))
                            {
                                throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                            }
                            if (((unpacker.IsArrayHeader == false)
                                 && (unpacker.IsMapHeader == false)))
                            {
                                nullable11 = this._serializer2.UnpackFrom(unpacker);
                            }
                            else
                            {
                                MsgPack.Unpacker disposable3 = default(MsgPack.Unpacker);
                                disposable3 = unpacker.ReadSubtree();
                                try
                                {
                                    nullable11 = this._serializer2.UnpackFrom(disposable3);
                                }
                                finally
                                {
                                    if (((disposable3 == null)
                                         == false))
                                    {
                                        disposable3.Dispose();
                                    }
                                }
                            }
                            if (((nullable11 == null)
                                 == false))
                            {
                                if (nullable11 is MsgPack.MessagePackObject)
                                {
                                    result.Data = ((MessagePackObject) nullable11).ToObject();
                                }
                                else if (nullable11 is MessagePackObject[])
                                {
                                    result.Data =
                                        ((MessagePackObject[]) nullable11).Select(x => x.ToObject()).ToArray();
                                }
                                else
                                {
                                    result.Data = nullable11;
                                }
                            }
                        }
                        else
                        {
                            if ((key == "connectionId"))
                            {
                                string nullable10 = default(string);
                                nullable10 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker,
                                    typeof(IO.Ably.PresenceMessage), "System.String connectionId");
                                if (((nullable10 == null)
                                     == false))
                                {
                                    result.ConnectionId = nullable10;
                                }
                            }
                            else
                            {
                                if ((key == "clientId"))
                                {
                                    string nullable9 = default(string);
                                    nullable9 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker,
                                        typeof(IO.Ably.PresenceMessage), "System.String clientId");
                                    if (((nullable9 == null)
                                         == false))
                                    {
                                        result.ClientId = nullable9;
                                    }
                                }
                                else
                                {
                                    if ((key == "action"))
                                    {
                                        System.Nullable<IO.Ably.PresenceAction> nullable8 =
                                            default(System.Nullable<IO.Ably.PresenceAction>);
                                        if ((unpacker.Read() == false))
                                        {
                                            throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                                        }
                                        if (((unpacker.IsArrayHeader == false)
                                             && (unpacker.IsMapHeader == false)))
                                        {
                                            nullable8 = this._serializer4.UnpackFrom(unpacker);
                                        }
                                        else
                                        {
                                            MsgPack.Unpacker disposable2 = default(MsgPack.Unpacker);
                                            disposable2 = unpacker.ReadSubtree();
                                            try
                                            {
                                                nullable8 = this._serializer4.UnpackFrom(disposable2);
                                            }
                                            finally
                                            {
                                                if (((disposable2 == null)
                                                     == false))
                                                {
                                                    disposable2.Dispose();
                                                }
                                            }
                                        }
                                        if (nullable8.HasValue)
                                        {
                                            result.Action = nullable8.Value;
                                        }
                                    }
                                    else
                                    {
                                        if ((key == "id"))
                                        {
                                            string nullable7 = default(string);
                                            nullable7 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker,
                                                typeof(IO.Ably.PresenceMessage), "System.String id");
                                            if (((nullable7 == null)
                                                 == false))
                                            {
                                                result.Id = nullable7;
                                            }
                                        }
                                        else
                                        {
                                            unpacker.Skip();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return result;
        }

        private static T @__Conditional<T>(bool condition, T whenTrue, T whenFalse)
         {
            if (condition) {
                return whenTrue;
            }
            else {
                return whenFalse;
            }
        }
    }
}
